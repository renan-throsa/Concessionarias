// <auto-generated />
using System;
using Concs.Dados.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Concs.Dados.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20240830205844_Autent")]
    partial class Autent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Concs.Dominio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClienteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            CPF = "12345678901",
                            Nome = "Maria Silva",
                            Telefone = "(11) 98765-4321"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            CPF = "98765432109",
                            Nome = "João Santos",
                            Telefone = "(21) 5555-1234"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            CPF = "78912345602",
                            Nome = "Carlos Oliveira",
                            Telefone = "(31) 98765-9876"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            CPF = "65432198703",
                            Nome = "Ana Rodrigues",
                            Telefone = "(41) 5555-5678"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            CPF = "45678912304",
                            Nome = "Fernanda Lima",
                            Telefone = "(51) 98765-4321"
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            CPF = "32165498705",
                            Nome = "Rafael Souza",
                            Telefone = "(21) 5555-6789"
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            CPF = "65498732106",
                            Nome = "Lúcia Santos",
                            Telefone = "(31) 98765-1234"
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            CPF = "98732165407",
                            Nome = "Pedro Alves",
                            Telefone = "(41) 5555-2345"
                        },
                        new
                        {
                            Id = 9,
                            Ativo = true,
                            CPF = "78945612308",
                            Nome = "Mariana Oliveira",
                            Telefone = "(51) 98765-5678"
                        },
                        new
                        {
                            Id = 10,
                            Ativo = true,
                            CPF = "98732165409",
                            Nome = "Lucas Rodrigues",
                            Telefone = "(21) 5555-7890"
                        },
                        new
                        {
                            Id = 11,
                            Ativo = true,
                            CPF = "65478932110",
                            Nome = "Isabela Almeida",
                            Telefone = "(31) 98765-2345"
                        },
                        new
                        {
                            Id = 12,
                            Ativo = true,
                            CPF = "98765432111",
                            Nome = "Gustavo Lima",
                            Telefone = "(41) 5555-3456"
                        },
                        new
                        {
                            Id = 13,
                            Ativo = true,
                            CPF = "78912345612",
                            Nome = "Larissa Costa",
                            Telefone = "(51) 98765-6789"
                        },
                        new
                        {
                            Id = 14,
                            Ativo = true,
                            CPF = "98765432113",
                            Nome = "Ricardo Santos",
                            Telefone = "(21) 5555-8901"
                        },
                        new
                        {
                            Id = 15,
                            Ativo = true,
                            CPF = "65498732114",
                            Nome = "Camila Alves",
                            Telefone = "(31) 98765-3456"
                        },
                        new
                        {
                            Id = 16,
                            Ativo = true,
                            CPF = "98732165415",
                            Nome = "Fábio Lima",
                            Telefone = "(41) 5555-4567"
                        });
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Concessionaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConcessionariaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CapacidadeMaximaVeiculos")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Concessionarias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            CEP = "01234567",
                            CapacidadeMaximaVeiculos = 150,
                            Cidade = "São Paulo",
                            Email = "contato@concessionariadovale.com.br",
                            Endereco = "Rua das Flores, 123",
                            Estado = "São Paulo",
                            Nome = "Concessionária do Vale",
                            Telefone = "(11) 9876-5432"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            CEP = "09876543",
                            CapacidadeMaximaVeiculos = 200,
                            Cidade = "Santo André",
                            Email = "vendas@autocenterabc.com",
                            Endereco = "Av. das Palmeiras, 456",
                            Estado = "São Paulo",
                            Nome = "Auto Center ABC",
                            Telefone = "(11) 5555-1234"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            CEP = "20000123",
                            CapacidadeMaximaVeiculos = 180,
                            Cidade = "Rio de Janeiro",
                            Email = "vendas@autoshopzeta.com",
                            Endereco = "Rua dos Carros, 789",
                            Estado = "Rio de Janeiro",
                            Nome = "Auto Shop Zeta",
                            Telefone = "(21) 9876-5432"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            CEP = "30000456",
                            CapacidadeMaximaVeiculos = 220,
                            Cidade = "Belo Horizonte",
                            Email = "contato@megamotors.com.br",
                            Endereco = "Av. das Rodovias, 567",
                            Estado = "Minas Gerais",
                            Nome = "Mega Motors",
                            Telefone = "(31) 5555-1234"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            CEP = "80000789",
                            CapacidadeMaximaVeiculos = 190,
                            Cidade = "Curitiba",
                            Email = "vendas@carrosexpress.com",
                            Endereco = "Av. das Velocidades, 789",
                            Estado = "Paraná",
                            Nome = "Carros Express",
                            Telefone = "(41) 5555-6789"
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            CEP = "90000123",
                            CapacidadeMaximaVeiculos = 210,
                            Cidade = "Porto Alegre",
                            Email = "contato@autocenterxyz.com",
                            Endereco = "Rua dos Motores, 567",
                            Estado = "Rio Grande do Sul",
                            Nome = "Auto Center XYZ",
                            Telefone = "(51) 9876-2345"
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            CEP = "88000789",
                            CapacidadeMaximaVeiculos = 200,
                            Cidade = "Florianópolis",
                            Email = "vendas@carrosrapidos.com",
                            Endereco = "Av. das Acelerações, 789",
                            Estado = "Santa Catarina",
                            Nome = "Carros Rápidos",
                            Telefone = "(48) 9876-5678"
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            CEP = "50000123",
                            CapacidadeMaximaVeiculos = 230,
                            Cidade = "Recife",
                            Email = "contato@autocenterabcd.com",
                            Endereco = "Rua dos Motores, 123",
                            Estado = "Pernambuco",
                            Nome = "Auto Center ABCD",
                            Telefone = "(81) 5555-6789"
                        });
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Fabricante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FabricanteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnoFundacao")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaisOrigem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Fabricantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnoFundacao = 1950,
                            Ativo = true,
                            Nome = "HyperCars",
                            PaisOrigem = "Brasil",
                            Website = "https://fabricantea.com"
                        },
                        new
                        {
                            Id = 2,
                            AnoFundacao = 1925,
                            Ativo = true,
                            Nome = "EcoMotors",
                            PaisOrigem = "Estados Unidos",
                            Website = "https://fabricanteb.com"
                        },
                        new
                        {
                            Id = 3,
                            AnoFundacao = 1960,
                            Ativo = true,
                            Nome = "SuperCarros",
                            PaisOrigem = "Itália",
                            Website = "https://www.supercarros.com"
                        },
                        new
                        {
                            Id = 4,
                            AnoFundacao = 1985,
                            Ativo = true,
                            Nome = "TechMotors",
                            PaisOrigem = "Japão",
                            Website = "https://www.techmotors.co.jp"
                        },
                        new
                        {
                            Id = 5,
                            AnoFundacao = 2003,
                            Ativo = true,
                            Nome = "TurboDrive",
                            PaisOrigem = "Coreia do Sul",
                            Website = "https://www.turbodrive"
                        },
                        new
                        {
                            Id = 6,
                            AnoFundacao = 2006,
                            Ativo = true,
                            Nome = "Electric Wheels",
                            PaisOrigem = "Holanda",
                            Website = "https://www.wlectricwheels.co.ho"
                        });
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.TipoVeiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoVeiculoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposVeiculos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Tipo = "Carro"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Tipo = "Moto"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Tipo = "Caminhão"
                        });
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VeiculoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FabricanteId")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoVeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FabricanteId");

                    b.HasIndex("Modelo");

                    b.HasIndex("TipoVeiculoId");

                    b.ToTable("Veiculos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnoFabricacao = 2022,
                            Ativo = true,
                            Descricao = "Veículo confortável e econômico.",
                            FabricanteId = 1,
                            Modelo = "Sedan",
                            Preco = 55000.00m,
                            TipoVeiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnoFabricacao = 2021,
                            Ativo = true,
                            Descricao = "Moto ágil e potente.",
                            FabricanteId = 2,
                            Modelo = "Esportiva",
                            Preco = 12000.00m,
                            TipoVeiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            AnoFabricacao = 2022,
                            Ativo = true,
                            Descricao = "Um carro confortável e econômico.",
                            FabricanteId = 3,
                            Modelo = "Sedan",
                            Preco = 45000.00m,
                            TipoVeiculoId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnoFabricacao = 2023,
                            Ativo = true,
                            Descricao = "Um SUV espaçoso e versátil.",
                            FabricanteId = 3,
                            Modelo = "SUV",
                            Preco = 55000.00m,
                            TipoVeiculoId = 1
                        },
                        new
                        {
                            Id = 5,
                            AnoFabricacao = 2024,
                            Ativo = true,
                            Descricao = "Um carro compacto e ágil.",
                            FabricanteId = 4,
                            Modelo = "Hatchback",
                            Preco = 35000.00m,
                            TipoVeiculoId = 1
                        },
                        new
                        {
                            Id = 6,
                            AnoFabricacao = 2023,
                            Ativo = true,
                            Descricao = "Uma caminhonete robusta e versátil.",
                            FabricanteId = 5,
                            Modelo = "Caminhonete",
                            Preco = 65000.00m,
                            TipoVeiculoId = 3
                        },
                        new
                        {
                            Id = 7,
                            AnoFabricacao = 2024,
                            Ativo = true,
                            Descricao = "Um carro compacto e ágil.",
                            FabricanteId = 5,
                            Modelo = "Hatchback",
                            Preco = 35000.00m,
                            TipoVeiculoId = 1
                        },
                        new
                        {
                            Id = 8,
                            AnoFabricacao = 2023,
                            Ativo = true,
                            Descricao = "Uma caminhonete robusta e versátil.",
                            FabricanteId = 6,
                            Modelo = "Caminhonete",
                            Preco = 65000.00m,
                            TipoVeiculoId = 3
                        });
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ConcessionariaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PrecoVenda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProtocoloVenda")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ConcessionariaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Vendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            ClienteId = 1,
                            ConcessionariaId = 1,
                            DataVenda = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 50000.00m,
                            ProtocoloVenda = "DAF77E51-689D-476B-A",
                            VeiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            ClienteId = 2,
                            ConcessionariaId = 1,
                            DataVenda = new DateTime(2024, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 45000.00m,
                            ProtocoloVenda = "E5744385-23A1-4103-B",
                            VeiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            ClienteId = 3,
                            ConcessionariaId = 2,
                            DataVenda = new DateTime(2024, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 55000.00m,
                            ProtocoloVenda = "1B2A47EF-D0F6-42F7-8",
                            VeiculoId = 3
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            ClienteId = 4,
                            ConcessionariaId = 2,
                            DataVenda = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 48000.00m,
                            ProtocoloVenda = "992A4573-32D4-486E-8",
                            VeiculoId = 4
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            ClienteId = 5,
                            ConcessionariaId = 5,
                            DataVenda = new DateTime(2024, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 52000.00m,
                            ProtocoloVenda = "2A488519-2A0A-4EC2-B",
                            VeiculoId = 5
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            ClienteId = 6,
                            ConcessionariaId = 5,
                            DataVenda = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 47000.00m,
                            ProtocoloVenda = "D27C92B1-8A09-4631-A",
                            VeiculoId = 6
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            ClienteId = 7,
                            ConcessionariaId = 7,
                            DataVenda = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 53000.00m,
                            ProtocoloVenda = "BF870959-A3AD-49F1-A",
                            VeiculoId = 7
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            ClienteId = 8,
                            ConcessionariaId = 8,
                            DataVenda = new DateTime(2024, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 48000.00m,
                            ProtocoloVenda = "3D4F07D3-58A9-4C36-8",
                            VeiculoId = 8
                        },
                        new
                        {
                            Id = 9,
                            Ativo = true,
                            ClienteId = 8,
                            ConcessionariaId = 8,
                            DataVenda = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 50000.00m,
                            ProtocoloVenda = "D014E1EE-1815-4330-8",
                            VeiculoId = 8
                        },
                        new
                        {
                            Id = 10,
                            Ativo = true,
                            ClienteId = 7,
                            ConcessionariaId = 7,
                            DataVenda = new DateTime(2024, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 45000.00m,
                            ProtocoloVenda = "D4A5A33C-C97C-481F-9",
                            VeiculoId = 7
                        },
                        new
                        {
                            Id = 11,
                            Ativo = true,
                            ClienteId = 16,
                            ConcessionariaId = 6,
                            DataVenda = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 55000.00m,
                            ProtocoloVenda = "BECDC76B-2A6B-4B9B-B",
                            VeiculoId = 6
                        },
                        new
                        {
                            Id = 12,
                            Ativo = true,
                            ClienteId = 15,
                            ConcessionariaId = 5,
                            DataVenda = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 48000.00m,
                            ProtocoloVenda = "54645376-B7B3-4053-9",
                            VeiculoId = 5
                        },
                        new
                        {
                            Id = 13,
                            Ativo = true,
                            ClienteId = 14,
                            ConcessionariaId = 7,
                            DataVenda = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 52000.00m,
                            ProtocoloVenda = "F3373587-EFD6-4F2A-9",
                            VeiculoId = 4
                        },
                        new
                        {
                            Id = 14,
                            Ativo = true,
                            ClienteId = 13,
                            ConcessionariaId = 5,
                            DataVenda = new DateTime(2024, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 47000.00m,
                            ProtocoloVenda = "07150DDD-D2A9-400D-8",
                            VeiculoId = 3
                        },
                        new
                        {
                            Id = 15,
                            Ativo = true,
                            ClienteId = 9,
                            ConcessionariaId = 3,
                            DataVenda = new DateTime(2024, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecoVenda = 53000.00m,
                            ProtocoloVenda = "0FEE5AB8-2FB5-4462-8",
                            VeiculoId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "907bf840-c70f-4f63-bf86-917431f413e6",
                            Email = "manoelhugocarvalho@demasi.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MANOELHUGOCARVALHO@DEMASI.COM.BR",
                            NormalizedUserName = "MANOELHUGOCARVALHO@DEMASI.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEMC/VuaOtFbfFLQG7ahezLegA+zaLkdBsxUhIY1xoz9/dCD8nzMegnyCrNiun4kxpg==",
                            PhoneNumber = "(79) 99598-4047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "28bb9bf5-0ba1-4d0a-b542-7f49ef614aaf",
                            TwoFactorEnabled = false,
                            UserName = "Manoel Hugo Carvalho"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a9210e-1eec-4b54-9b1c-c2b8894d2aaa",
                            Email = "taniapatriciabernardes@agen-pegeuot.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TANIAPATRICIABERNARDES@AGEN-PEGEUOT.COM.BR",
                            NormalizedUserName = "TÂNIA PATRÍCIA CAROLINE BERNARDES",
                            PasswordHash = "AQAAAAEAACcQAAAAEJz8uiWzQLorMKL6THPe78UFrwtsdIo6YfxLwUjxHi8j3iBVlbzXdvJIYHQah/7a9w==",
                            PhoneNumber = "(92) 99115-2024",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e2384a85-6da0-47f6-b7ac-2902dc1e2ff5",
                            TwoFactorEnabled = false,
                            UserName = "Tânia Patrícia Caroline Bernardes"
                        },
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd978318-20ff-4950-a63c-b2cf239c3f25",
                            Email = "thales.juan.pereira@santosferreira.adv.br",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "THALES.JUAN.PEREIRA@SANTOSFERREIRA.ADV.BR",
                            NormalizedUserName = "THALES JUAN PEREIRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEK+cwbSpJ+papHkjt0FkaVboQ0GnixjH9h8pdoOkPOrD/YNqv3JbCgmCnRvcIwNx9w==",
                            PhoneNumber = "(98) 99749-3175",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7c33b464-13ce-48d9-a764-1858f6f9e6ff",
                            TwoFactorEnabled = false,
                            UserName = "Thales Juan Pereira"
                        },
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7e9231c-639b-4e2e-8ae2-60cf922d82a9",
                            Email = "esther-nogueira86@edu.uniso.br",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ESTHER-NOGUEIRA86@EDU.UNISO.BR",
                            NormalizedUserName = "ESTHER MANUELA NATÁLIA NOGUEIRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMzt46uF50BsJfVRITrFual9VOsYoKSFJsGfsO5UHd4CPqKYCkeaHTi/wsyQGq1tXQ==",
                            PhoneNumber = "(98) 98876-8556",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c48d722d-e6bc-4bdb-8fad-958791a36caa",
                            TwoFactorEnabled = false,
                            UserName = "Esther Manuela Natália Nogueira"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Inserir",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Atualizar",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Inserir",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Atualizar",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Inserir",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Atualizar",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Inserir",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Atualizar",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Inserir",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Atualizar",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permissões",
                            ClaimValue = "Relatorio.Ler",
                            UserId = "88ecdfcb-85b4-4b8a-969e-47a4d07701bb"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Inserir",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Atualizar",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Inserir",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Atualizar",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Inserir",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Atualizar",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permissões",
                            ClaimValue = "Relatorio.Ler",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Ler",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Ler",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Ler",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Ler",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Ler",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Inserir",
                            UserId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permissões",
                            ClaimValue = "Fabricante.Ler",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permissões",
                            ClaimValue = "Concessionária.Ler",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permissões",
                            ClaimValue = "Veículo.Ler",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permissões",
                            ClaimValue = "Cliente.Ler",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Ler",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permissões",
                            ClaimValue = "Venda.Inserir",
                            UserId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Veiculo", b =>
                {
                    b.HasOne("Concs.Dominio.Entidades.Fabricante", "Fabricante")
                        .WithMany()
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concs.Dominio.Entidades.TipoVeiculo", "TipoVeiculo")
                        .WithMany()
                        .HasForeignKey("TipoVeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fabricante");

                    b.Navigation("TipoVeiculo");
                });

            modelBuilder.Entity("Concs.Dominio.Entidades.Venda", b =>
                {
                    b.HasOne("Concs.Dominio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concs.Dominio.Entidades.Concessionaria", "Concessionaria")
                        .WithMany()
                        .HasForeignKey("ConcessionariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concs.Dominio.Entidades.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Concessionaria");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
